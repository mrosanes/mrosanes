#!/usr/bin/python

import datetime
import argparse
import os
import sys


def main():

    #Storage of current directory: initial path before executing the script.
    intitialpath=os.getcwd()

    parser = argparse.ArgumentParser(description='Automate the process of normalizing the tomographies \n The tomography and the FF are extracted from an input HDF5 file.')
    parser.add_argument('-f','--folder', type=str, default=os.getcwd(), 
        help="Indicates the folder adress where the subfolders 'tomo1' 'tomo2' and so on, are located.")   

    args = parser.parse_args()
    general_folder = args.folder

    normalize_program_name='normalize'

    
    for folder in os.listdir(general_folder):
             
        specific_folder=os.path.join(general_folder, folder)
        # Checking if the subfolder is a subfolder of tomos.
        if os.path.isdir(specific_folder) and ('tomo' in folder):

            tomo_hdf5_file='None'
            tomo_txrm_file='None'
            flatfield_txrm_file='None'

            os.chdir(specific_folder)
            print('Converting tomos from folder '+ folder)

            for files in os.listdir("."):
                if files.endswith(".txrm"):    
                    if 'FF' in files:
                        flatfield_txrm_file=files 
                        flatfield_txrm_without_extension = os.path.splitext(flatfield_txrm_file)[0]

                        last_five_chars=flatfield_txrm_without_extension[len(flatfield_txrm_without_extension)-5:len(flatfield_txrm_without_extension)]

                        if  '.' in last_five_chars:
                            index_of_point=last_five_chars.index('.')
                            numberFFstr=last_five_chars[index_of_poin-1:index_of_poin+2]
                            numberFF=float(numberFFstr)
                        else:
                            last_three_chars=flatfield_txrm_without_extension[len(flatfield_txrm_without_extension)-3:len(flatfield_txrm_without_extension)]
                            numberFFstr = filter(str.isdigit, last_three_chars)
                            numberFF = float(numberFFstr)

                    if 'FF' not in files:
                        tomo_txrm_file=files
                        tomo_txrm_file_without_extension = os.path.splitext(tomo_txrm_file)[0]
    

                        last_five_chars=tomo_txrm_file_without_extension[len(tomo_txrm_file_without_extension)-5:len(tomo_txrm_file_without_extension)]

                        if  '.' in last_five_chars:
                            index_of_point=last_five_chars.index('.')
                            numberTomoStr=last_five_chars[index_of_poin-1:index_of_poin+2]
                            numberTomo=float(numberTomoStr)
                        else:
                            last_three_chars=tomo_txrm_file_without_extension[len(tomo_txrm_file_without_extension)-3:len(tomo_txrm_file_without_extension)]
                            numberTomoStr = filter(str.isdigit, last_three_chars)
                            numberTomo = float(numberTomoStr)

            
            for file_in_folder in os.listdir("."):
                if (file_in_folder.endswith(".hdf5") and (not 'norm' in file_in_folder) and (not 'crop' in file_in_folder)):    
                    tomo_hdf5_file=file_in_folder

            
            if (tomo_hdf5_file!='None' and tomo_txrm_file!='None' and flatfield_txrm_file!='None'):
                indicator=True
                for file_in_folder in os.listdir("."):
                    if (file_in_folder.endswith("norm.hdf5")):
                        indicator=False
                        print('A normalized file already exists, delete the exiting file finishing by the string norm.hdf5 \n if you want the normalized file to be recreated.' )
                if (indicator):
                    ratio=numberTomo/numberFF
                    ratiostr=str(ratio)
                    print('numberTomo: '+str(numberTomo))
                    print('numberFF: '+str(numberFF))
                    print('ratio: ' + ratiostr)
                    call_normalize=normalize_program_name+' '+tomo_hdf5_file +' -r='+ratiostr
                    os.system(call_normalize)
                    f = open('ratio.txt', 'w')
                    f.write(ratiostr)
                    f.close()
            os.chdir(general_folder)


    # Return to initial path, the one that we had before executing the script.
    os.chdir(intitialpath)



if __name__ == "__main__":
    main()

     
